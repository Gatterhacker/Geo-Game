# -*- coding: utf-8 -*-
"""Geography Quiz by MPQSASNA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CpFoLXNdBe206VKyCUfVoSEZ6BrIRZl0
"""

####################################################################################
# Programming group project:
# GEOGRAPHY QUIZ by MPQSASNA
#
# AUTHORS:
# Luc Scherrer 
# Matteo Jutzi
# Steve Federlechner
# Frederick Ohle
#
# The code for this project was written in Python using Google Colaboratory
#
# For more detailed descriptions and background information, please visit
# https://github.com/
####################################################################################

# The following lines of code import the required libraries

import requests
import random as rd
import matplotlib.pyplot as plt

# The following lines of code define the func. get_countries_and_capitals

def get_countries_and_capitals():
    # Country-capital data is retrieved from API
    url = "https://restcountries.com/v2/all"
    response = requests.get(url)
    data = response.json()

    countries_capitals = {}
    for country_data in data:
        if 'capital' in country_data and country_data['capital']:
            countries_capitals[country_data['name']] = country_data['capital']

    return countries_capitals

# The following lines of code define the func. get_multiple_choice_options

def get_multiple_choice_options(countries_capitals, country, correct_capital):
    # Multiple-choice options for the easy level are generated
    options = [correct_capital]
    while len(options) < 4:
        capital = rd.choice(list(countries_capitals.values()))
        if capital not in options:
            options.append(capital)
    rd.shuffle(options)
    return options

# The following lines of code define the func. start_quiz

def start_quiz():
    print("Welcome to the Geography Quiz created for you by MPQSASNA!")
    print("Let's test your knowledge of country capitals.")

    # Country-capital data is retrieved and variables are initialized
    countries_capitals = get_countries_and_capitals()
    countries_list = list(countries_capitals.keys())

    round_count = 1
    play_again = True

    while play_again:
        print(f"\n=== Round {round_count} ===")
        correct_count = 0
        wrong_count = 0

        rd.shuffle(countries_list)

        # Difficulty level selection is prompted
        difficulty_level = input("Select difficulty level: (easy/hard) ")
        while difficulty_level.lower() not in ['easy', 'hard']:
            print("Invalid input. Please select either 'easy' or 'hard'.")
            difficulty_level = input("Select difficulty level: (easy/hard) ")

        for i in range(10):
            country = countries_list[i]
            capital = countries_capitals[country]

            if difficulty_level.lower() == 'easy':
                # Easy level: Multiple-choice options are presented
                options = get_multiple_choice_options(countries_capitals, country, capital)
                print(f"What is the capital of {country}?")
                for j, option in enumerate(options):
                    print(f"{j+1}. {option}")

                answer = input("Enter the number of your choice: ")
                while not answer.isdigit() or int(answer) not in [1, 2, 3, 4]:
                    print("Invalid input. Please enter the number corresponding to your choice.")
                    answer = input("Enter the number of your choice: ")

                selected_option = options[int(answer) - 1]
                if selected_option == capital:
                    correct_count += 1
                    print("Correct!")
                else:
                    wrong_count += 1
                    print(f"Sorry, the answer is {capital}.")

                print()  # Space is added for better visuability

            elif difficulty_level.lower() == 'hard':
                # Hard level: Ask for the capital directly
                answer = input(f"What is the capital of {country}? ")
                if answer.lower() != capital.lower():
                    wrong_count += 1
                    print(f"Sorry, the answer is {capital}.")
                else:
                    correct_count += 1
                    print("Correct.")

                print()  # Space is added for better visuability

        total_count = correct_count + wrong_count
        print(f"\nRound {round_count} results:")
        print(f"You answered {correct_count} questions correctly out of {total_count} questions.")

        # Quiz results are displayed using a pie chart
        plt.pie([correct_count, wrong_count], labels=['Correct', 'Incorrect'], colors=['green', 'red'], autopct='%1.1f%%')
        plt.title('Quiz Results')
        plt.show()

        round_count += 1

        # User gets prompted for playing another round or quitting
        play_again_input = input("Do you want to play another round? (yes/no) ")
        if play_again_input.lower() != 'yes':
            play_again = False

    print()     # Space is added for better visuability
    print("Thanks for playing the Geography Quiz by MPQSASNA! We hope you had fun playing and were able to learn something! Until next time.")

start_quiz()